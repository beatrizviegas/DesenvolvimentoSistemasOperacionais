package escalonamento;

import java.util.ArrayList;

public class Escalonador {

	static ArrayList<Processo> listEscalonamento = new ArrayList<>();

	public Escalonador() {
		Processo processo = new Processo();
		listEscalonamento = processo.escalonamento();
	}

	public void info() {
		for (int i = 0; i < listEscalonamento.size(); i++) {
			System.out.println("Processo: " + listEscalonamento.get(i).getProcesso());
			System.out.println("Tempo chegada: " + listEscalonamento.get(i).getTempoChegada());
			System.out.println("Tempo execução: " + listEscalonamento.get(i).getTempoExecucao());
			System.out.println("Tempo restante: " + listEscalonamento.get(i).getTempoRestante());
			System.out.println("Prioridade: " + listEscalonamento.get(i).getPrioridade());
			System.out.println(" ");
		}
	}

	public void FCFS() {
		int tempoTotal = 0;
		int tempoExecucao = 1;
		int tempoEspera = 0;
		double tempoEsperaMedio = 0;

		for (int i = 0; i < listEscalonamento.size(); i++) {
			tempoTotal += listEscalonamento.get(i).getTempoExecucao();
		}
		System.out.println("Tempo total de execução: " + tempoTotal);

		for (int i = 0; i < listEscalonamento.size(); i++) {
			while (listEscalonamento.get(i).getTempoRestante() > 0) {
				listEscalonamento.get(i).setTempoRestante(listEscalonamento.get(i).getTempoRestante() - 1);

				System.out.println("Tempo[" + tempoExecucao + "]: Processo[" + listEscalonamento.get(i).getProcesso()
						+ "] restante " + listEscalonamento.get(i).getTempoRestante());

				tempoExecucao++;

				for (int x = i + 1; x <= listEscalonamento.size() - 1; x++) {
					listEscalonamento.get(x).setTempoEspera(listEscalonamento.get(x).getTempoEspera() + 1);
				}

				for (int x = 0; x < i; x++) {
					if (listEscalonamento.get(x).getTempoRestante() > 0) {
						listEscalonamento.get(x).setTempoEspera(listEscalonamento.get(x).getTempoEspera() + 1);
					}
				}
			}
		}

		for (int i = 0; i < listEscalonamento.size(); i++) {
			tempoEspera += listEscalonamento.get(i).getTempoEspera();
		}

		for (int i = 0; i < listEscalonamento.size(); i++) {
			listEscalonamento.get(i).reiniciaTempoRestante(listEscalonamento.get(i));
		}

		tempoEsperaMedio = tempoEspera / (listEscalonamento.size());

		System.out.println("Tempo de espera total: " + tempoEspera);
		System.out.println("Tempo de espera médio: " + tempoEsperaMedio);

	}

	public void SJFNaoPreemptivo() {
		int tempoTotal = 0;
		int tempoExecucao = 1;
		int tempoEspera = 0;
		double tempoEsperaMedio = 0;

		for (int i = 0; i < listEscalonamento.size(); i++) {
			tempoTotal += listEscalonamento.get(i).getTempoExecucao();
		}
		System.out.println("Tempo total de execução: " + tempoTotal);

		Processo primeiroProcesso = new Processo();

		primeiroProcesso = (primeiroProcesso.procuraProcessoChegada());

		while (!primeiroProcesso.verificaTempoExecucao(primeiroProcesso, tempoExecucao)) {
			System.out.println("Tempo[" + tempoExecucao + "] Nenhum processo alocado");
			tempoExecucao++;
		}

		while (primeiroProcesso.getTempoRestante() > 0) {
			primeiroProcesso.setTempoRestante(primeiroProcesso.getTempoRestante() - 1);

			System.out.println("Tempo[" + tempoExecucao + "]: Processo[" + primeiroProcesso.getProcesso()
					+ "] restante " + primeiroProcesso.getTempoRestante());

			tempoExecucao++;
			primeiroProcesso.ajustaTempoRestante(primeiroProcesso);

			for (int i = 0; i < listEscalonamento.size(); i++) {
				if (primeiroProcesso.getProcesso() == i) {
					listEscalonamento.get(i).setTempoRestante(listEscalonamento.get(i).getTempoRestante() - 1);
				}
			}

			for (int i = 0; i < listEscalonamento.size(); i++) {
				if (primeiroProcesso.getProcesso() == i) {
					for (int x = i + 1; x <= listEscalonamento.size() - 1; x++) {
						listEscalonamento.get(x).setTempoEspera(listEscalonamento.get(x).getTempoEspera() + 1);
					}

					for (int x = 0; x < i; x++) {
						if (listEscalonamento.get(x).getTempoRestante() > 0) {
							listEscalonamento.get(x).setTempoEspera(listEscalonamento.get(x).getTempoEspera() + 1);
						}
					}
				}
			}

		}

		for (int i = 0; i < listEscalonamento.size(); i++) {
			Processo processoMaisCurto = new Processo();

			processoMaisCurto = (processoMaisCurto.procuraProcessoExecucao());

			while (processoMaisCurto.verificaTempoExecucao(processoMaisCurto, tempoExecucao) == false) {
				System.out.println("Tempo[" + tempoExecucao + "] Nenhum processo alocado");
				tempoExecucao++;

				for (int x = 0; x < listEscalonamento.size(); x++) {
					listEscalonamento.get(x).setTempoEspera(listEscalonamento.get(x).getTempoEspera() + 1);
				}
			}

			while (processoMaisCurto.getTempoRestante() > 0) {
				processoMaisCurto.setTempoRestante(processoMaisCurto.getTempoRestante() - 1);

				System.out.println("Tempo[" + tempoExecucao + "]: Processo[" + processoMaisCurto.getProcesso()
						+ "] restante " + processoMaisCurto.getTempoRestante());

				tempoExecucao++;
				processoMaisCurto.ajustaTempoRestante(processoMaisCurto);

				for (int x = 0; x < listEscalonamento.size(); x++) {
					if (processoMaisCurto.getProcesso() == x) {
						listEscalonamento.get(x).setTempoRestante(listEscalonamento.get(x).getTempoRestante() - 1);
					}
				}

				for (int k = 0; k < listEscalonamento.size(); k++) {
					if (processoMaisCurto.getProcesso() == k) {
						for (int x = k + 1; x <= listEscalonamento.size() - 1; x++) {
							listEscalonamento.get(x).setTempoEspera(listEscalonamento.get(x).getTempoEspera() + 1);
						}

						for (int x = 0; x < k; x++) {
							if (listEscalonamento.get(x).getTempoRestante() > 0) {
								listEscalonamento.get(x).setTempoEspera(listEscalonamento.get(x).getTempoEspera() + 1);
							}
						}
					}
				}
			}

		}

		for (int i = 0; i < listEscalonamento.size(); i++) {
			tempoEspera += listEscalonamento.get(i).getTempoEspera();
		}

		tempoEsperaMedio = tempoEspera / (listEscalonamento.size());

		System.out.println("Tempo de espera total: " + tempoEspera);
		System.out.println("Tempo de espera médio: " + tempoEsperaMedio);

		for (int i = 0; i < listEscalonamento.size(); i++) {
			listEscalonamento.get(i).reiniciaTempoRestante(listEscalonamento.get(i));
		}
	}

	public void SJFPreemptivo() {
		int tempoTotal = 0;
		int tempoExecucao = 1;
		int tempoEspera = 0;
		double tempoEsperaMedio = 0;

		for (int i = 0; i < listEscalonamento.size(); i++) {
			tempoTotal += listEscalonamento.get(i).getTempoExecucao();
		}
		System.out.println("Tempo total de execução: " + tempoTotal);

		Processo primeiroProcesso = new Processo();

		primeiroProcesso = (primeiroProcesso.procuraProcessoChegada());

		while (!primeiroProcesso.verificaTempoExecucao(primeiroProcesso, tempoExecucao)) {
			System.out.println("Tempo[" + tempoExecucao + "] Nenhum processo alocado");
			tempoExecucao++;
		}

		while (primeiroProcesso.getTempoRestante() > 0) {
			if (primeiroProcesso.getTempoRestante() == 999) {
				System.out.println("Tempo[" + tempoExecucao + "] Nenhum processo alocado");
				tempoExecucao++;
			}
			primeiroProcesso.setTempoRestante(primeiroProcesso.getTempoRestante() - 1);

			System.out.println("Tempo[" + tempoExecucao + "]: Processo[" + primeiroProcesso.getProcesso()
					+ "] restante " + primeiroProcesso.getTempoRestante());

			tempoExecucao++;
			primeiroProcesso.ajustaTempoRestante(primeiroProcesso);

			for (int i = 0; i < listEscalonamento.size(); i++) {
				if (primeiroProcesso.getProcesso() == i) {
					listEscalonamento.get(i).setTempoRestante(listEscalonamento.get(i).getTempoRestante() - 1);
				}
			}

			for (int i = 0; i < listEscalonamento.size(); i++) {
				if (primeiroProcesso.getProcesso() == i) {
					for (int x = i + 1; x <= listEscalonamento.size() - 1; x++) {
						listEscalonamento.get(x).setTempoEspera(listEscalonamento.get(x).getTempoEspera() + 1);
					}

					for (int x = 0; x < i; x++) {
						if (listEscalonamento.get(x).getTempoRestante() > 0) {
							listEscalonamento.get(x).setTempoEspera(listEscalonamento.get(x).getTempoEspera() + 1);
						}
					}
				}
			}

			Processo proximoProcesso = primeiroProcesso;

			proximoProcesso = (proximoProcesso.procuraProcessoExecucaoRestante(tempoExecucao));

			if (proximoProcesso.verificaTempoExecucao(proximoProcesso, tempoExecucao)
					&& proximoProcesso.getTempoRestante() != 0) {
				primeiroProcesso = proximoProcesso;

				primeiroProcesso.setTempoRestante(primeiroProcesso.getTempoRestante() - 1);

				System.out.println("Tempo[" + tempoExecucao + "]: Processo[" + primeiroProcesso.getProcesso()
						+ "] restante " + primeiroProcesso.getTempoRestante());

				tempoExecucao++;
				primeiroProcesso.ajustaTempoRestante(primeiroProcesso);

				for (int x = 0; x < listEscalonamento.size(); x++) {
					if (primeiroProcesso.getProcesso() == x) {
						listEscalonamento.get(x).setTempoRestante(listEscalonamento.get(x).getTempoRestante() - 1);
					}
				}

				for (int k = 0; k < listEscalonamento.size(); k++) {
					if (primeiroProcesso.getProcesso() == k) {
						for (int x = k + 1; x <= listEscalonamento.size() - 1; x++) {
							listEscalonamento.get(x).setTempoEspera(listEscalonamento.get(x).getTempoEspera() + 1);
						}

						for (int x = 0; x < k; x++) {
							if (listEscalonamento.get(x).getTempoRestante() > 0) {
								listEscalonamento.get(x).setTempoEspera(listEscalonamento.get(x).getTempoEspera() + 1);
							}
						}
					}
				}

				if (primeiroProcesso.getTempoRestante() == 0) {
					primeiroProcesso = primeiroProcesso.procuraProcessoExecucaoRestante(tempoExecucao);
				}
			} else {
				for (int i = 0; i < listEscalonamento.size(); i++) {
					tempoEspera += listEscalonamento.get(i).getTempoEspera();
				}

				tempoEsperaMedio = tempoEspera / (listEscalonamento.size());

				System.out.println("Tempo de espera total: " + tempoEspera);
				System.out.println("Tempo de espera médio: " + tempoEsperaMedio);

				break;
			}
		}

		for (int i = 0; i < listEscalonamento.size(); i++) {
			tempoEspera += listEscalonamento.get(i).getTempoEspera();
		}

		tempoEsperaMedio = tempoEspera / (listEscalonamento.size());

		System.out.println("Tempo de espera total: " + tempoEspera);
		System.out.println("Tempo de espera médio: " + tempoEsperaMedio);
		for (int i = 0; i < listEscalonamento.size(); i++) {
			listEscalonamento.get(i).reiniciaTempoRestante(listEscalonamento.get(i));
		}
	}

	public void PrioridadeNaoPreemptivo() {
		int tempoTotal = 0;
		int tempoExecucao = 1;
		int tempoEspera = 0;
		double tempoEsperaMedio = 0;

		for (int i = 0; i < listEscalonamento.size(); i++) {
			tempoTotal += listEscalonamento.get(i).getTempoExecucao();
		}
		System.out.println("Tempo total de execução: " + tempoTotal);

		Processo primeiroProcesso = new Processo();

		primeiroProcesso = (primeiroProcesso.procuraProcessoChegada());

		while (!primeiroProcesso.verificaTempoExecucao(primeiroProcesso, tempoExecucao)) {
			System.out.println("Tempo[" + tempoExecucao + "] Nenhum processo alocado");
			tempoExecucao++;
		}

		while (primeiroProcesso.getTempoRestante() > 0) {
			primeiroProcesso.setTempoRestante(primeiroProcesso.getTempoRestante() - 1);

			System.out.println("Tempo[" + tempoExecucao + "]: Processo[" + primeiroProcesso.getProcesso()
					+ "] restante " + primeiroProcesso.getTempoRestante());

			tempoExecucao++;
			primeiroProcesso.ajustaTempoRestante(primeiroProcesso);

			for (int i = 0; i < listEscalonamento.size(); i++) {
				if (primeiroProcesso.getProcesso() == i) {
					listEscalonamento.get(i).setTempoRestante(listEscalonamento.get(i).getTempoRestante() - 1);
				}
			}

			for (int i = 0; i < listEscalonamento.size(); i++) {
				if (primeiroProcesso.getProcesso() == i) {
					for (int x = i + 1; x <= listEscalonamento.size() - 1; x++) {
						listEscalonamento.get(x).setTempoEspera(listEscalonamento.get(x).getTempoEspera() + 1);
					}

					for (int x = 0; x < i; x++) {
						if (listEscalonamento.get(x).getTempoRestante() > 0) {
							listEscalonamento.get(x).setTempoEspera(listEscalonamento.get(x).getTempoEspera() + 1);
						}
					}
				}
			}
		}

		for (int i = 0; i < listEscalonamento.size(); i++) {
			Processo processoMaisPrioritario = new Processo();

			processoMaisPrioritario = (processoMaisPrioritario.procuraProcessoPrioridade(tempoExecucao));

			while (processoMaisPrioritario.verificaTempoExecucao(processoMaisPrioritario, tempoExecucao) == false) {
				System.out.println("Tempo[" + tempoExecucao + "] Nenhum processo alocado");
				tempoExecucao++;

				for (int k = 0; i < listEscalonamento.size(); k++) {
					listEscalonamento.get(k).setTempoEspera(listEscalonamento.get(k).getTempoEspera() + 1);
				}
			}

			while (processoMaisPrioritario.getTempoRestante() > 0) {
				processoMaisPrioritario.setTempoRestante(processoMaisPrioritario.getTempoRestante() - 1);

				System.out.println("Tempo[" + tempoExecucao + "]: Processo[" + processoMaisPrioritario.getProcesso()
						+ "] restante " + processoMaisPrioritario.getTempoRestante());

				tempoExecucao++;
				processoMaisPrioritario.ajustaTempoRestante(processoMaisPrioritario);

				for (int x = 0; x < listEscalonamento.size(); x++) {
					if (processoMaisPrioritario.getProcesso() == x) {
						listEscalonamento.get(x).setTempoRestante(listEscalonamento.get(x).getTempoRestante() - 1);
					}
				}

				for (int k = 0; k < listEscalonamento.size(); k++) {
					if (processoMaisPrioritario.getProcesso() == k) {
						for (int x = k + 1; x <= listEscalonamento.size() - 1; x++) {
							listEscalonamento.get(x).setTempoEspera(listEscalonamento.get(x).getTempoEspera() + 1);
						}

						for (int x = 0; x < k; x++) {
							if (listEscalonamento.get(x).getTempoRestante() > 0) {
								listEscalonamento.get(x).setTempoEspera(listEscalonamento.get(x).getTempoEspera() + 1);
							}
						}
					}
				}
			}

		}
		for (int k = 0; k < listEscalonamento.size(); k++) {
			tempoEspera += listEscalonamento.get(k).getTempoEspera();
		}

		tempoEsperaMedio = tempoEspera / (listEscalonamento.size());

		System.out.println("Tempo de espera total: " + tempoEspera);
		System.out.println("Tempo de espera médio: " + tempoEsperaMedio);
		for (int i = 0; i < listEscalonamento.size(); i++) {
			listEscalonamento.get(i).reiniciaTempoRestante(listEscalonamento.get(i));
		}
	}

	public void PrioridadePreemptivo() {
		int tempoTotal = 0;
		int tempoExecucao = 1;
		int tempoEspera = 0;
		double tempoEsperaMedio = 0;

		for (int i = 0; i < listEscalonamento.size(); i++) {
			tempoTotal += listEscalonamento.get(i).getTempoExecucao();
		}
		System.out.println("Tempo total de execução: " + tempoTotal);

		Processo primeiroProcesso = new Processo();

		primeiroProcesso = (primeiroProcesso.procuraProcessoChegada());

		while (!primeiroProcesso.verificaTempoExecucao(primeiroProcesso, tempoExecucao)) {
			System.out.println("Tempo[" + tempoExecucao + "] Nenhum processo alocado");
			tempoExecucao++;

			for (int k = 0; k < listEscalonamento.size(); k++) {
				listEscalonamento.get(k).setTempoEspera(listEscalonamento.get(k).getTempoEspera() + 1);
			}
		}

		while (primeiroProcesso.getTempoRestante() > 0) {
			if (primeiroProcesso.getPrioridade() == 999) {
				System.out.println("Tempo[" + tempoExecucao + "] Nenhum processo alocado");
				tempoExecucao++;
			}
			primeiroProcesso.setTempoRestante(primeiroProcesso.getTempoRestante() - 1);

			System.out.println("Tempo[" + tempoExecucao + "]: Processo[" + primeiroProcesso.getProcesso()
					+ "] restante " + primeiroProcesso.getTempoRestante());

			tempoExecucao++;
			primeiroProcesso.ajustaTempoRestante(primeiroProcesso);

			for (int i = 0; i < listEscalonamento.size(); i++) {
				if (primeiroProcesso.getProcesso() == i) {
					listEscalonamento.get(i).setTempoRestante(listEscalonamento.get(i).getTempoRestante() - 1);
				}
			}

			for (int i = 0; i < listEscalonamento.size(); i++) {
				if (primeiroProcesso.getProcesso() == i) {
					for (int x = i + 1; x <= listEscalonamento.size() - 1; x++) {
						listEscalonamento.get(x).setTempoEspera(listEscalonamento.get(x).getTempoEspera() + 1);
					}

					for (int x = 0; x < i; x++) {
						if (listEscalonamento.get(x).getTempoRestante() > 0) {
							listEscalonamento.get(x).setTempoEspera(listEscalonamento.get(x).getTempoEspera() + 1);
						}
					}
				}
			}

			Processo proximoProcesso = primeiroProcesso;

			proximoProcesso = (proximoProcesso.procuraProcessoPrioridade(tempoExecucao));

			if (proximoProcesso.verificaTempoExecucao(proximoProcesso, tempoExecucao)
					&& proximoProcesso.getTempoRestante() != 0) {
				primeiroProcesso = proximoProcesso;

				primeiroProcesso.setTempoRestante(primeiroProcesso.getTempoRestante() - 1);

				System.out.println("Tempo[" + tempoExecucao + "]: Processo[" + primeiroProcesso.getProcesso()
						+ "] restante " + primeiroProcesso.getTempoRestante());

				tempoExecucao++;
				primeiroProcesso.ajustaTempoRestante(primeiroProcesso);

				for (int x = 0; x < listEscalonamento.size(); x++) {
					if (primeiroProcesso.getProcesso() == x) {
						listEscalonamento.get(x).setTempoRestante(listEscalonamento.get(x).getTempoRestante() - 1);
					}
				}

				for (int k = 0; k < listEscalonamento.size(); k++) {
					if (primeiroProcesso.getProcesso() == k) {
						for (int x = k + 1; x <= listEscalonamento.size() - 1; x++) {
							listEscalonamento.get(x).setTempoEspera(listEscalonamento.get(x).getTempoEspera() + 1);
						}

						for (int x = 0; x < k; x++) {
							if (listEscalonamento.get(x).getTempoRestante() > 0) {
								listEscalonamento.get(x).setTempoEspera(listEscalonamento.get(x).getTempoEspera() + 1);
							}
						}
					}
				}

				if (primeiroProcesso.getTempoRestante() == 0) {
					primeiroProcesso = primeiroProcesso.procuraProcessoPrioridade(tempoExecucao);
				}
			} else {
				break;
			}
		}

		for (int k = 0; k < listEscalonamento.size(); k++) {
			tempoEspera += listEscalonamento.get(k).getTempoEspera();
		}

		tempoEsperaMedio = tempoEspera / (listEscalonamento.size());

		System.out.println("Tempo de espera total: " + tempoEspera);
		System.out.println("Tempo de espera médio: " + tempoEsperaMedio);

		for (int i = 0; i < listEscalonamento.size(); i++) {
			listEscalonamento.get(i).reiniciaTempoRestante(listEscalonamento.get(i));
		}
	}

	public void removeProcessos() {
		Processo p = new Processo();
		p.deletaArrayProcessos();
	}

	public void RoundRobin(int timeSlice) {
		int tempoTotal = 0;
		int tempoExecucao = 1;
		int tempoExecutando = 0;
		int tempoEspera = 0;
		double tempoEsperaMedio = 0;

		Processo pivo = new Processo();

		for (int i = 0; i < listEscalonamento.size(); i++) {
			tempoTotal += listEscalonamento.get(i).getTempoExecucao();
		}
		System.out.println("Tempo total de execução: " + tempoTotal);

		for (int i = 0; i < listEscalonamento.size(); i++) {
			while (listEscalonamento.get(i).getTempoRestante() > 0) {
				listEscalonamento.get(i).setTempoRestante(listEscalonamento.get(i).getTempoRestante() - 1);

				tempoExecutando++;

				System.out.println("Tempo[" + tempoExecucao + "]: Processo[" + listEscalonamento.get(i).getProcesso()
						+ "] restante " + listEscalonamento.get(i).getTempoRestante());

				tempoExecucao++;

				for (int x = i + 1; x <= listEscalonamento.size() - 1; x++) {
					if (listEscalonamento.get(x).getTempoRestante() > 0) {
						listEscalonamento.get(x).setTempoEspera(listEscalonamento.get(x).getTempoEspera() + 1);
					}
				}

				for (int x = 0; x < i; x++) {
					if (listEscalonamento.get(x).getTempoRestante() > 0) {
						listEscalonamento.get(x).setTempoEspera(listEscalonamento.get(x).getTempoEspera() + 1);
					}
				}

				if (tempoExecutando == timeSlice) {
					pivo = listEscalonamento.remove(i);
					listEscalonamento.add(pivo);

					tempoExecutando = 0;

				}
				if (listEscalonamento.get(i).getTempoRestante() == 0) {
					pivo = listEscalonamento.remove(i);
					listEscalonamento.add(pivo);
				}
			}
		}
		for (int i = 0; i < listEscalonamento.size(); i++) {
			tempoEspera += listEscalonamento.get(i).getTempoEspera();
		}

		for (int i = 0; i < listEscalonamento.size(); i++) {
			listEscalonamento.get(i).reiniciaTempoRestante(listEscalonamento.get(i));
		}

		tempoEsperaMedio = tempoEspera / (listEscalonamento.size());

		System.out.println("Tempo de espera total: " + tempoEspera);
		System.out.println("Tempo de espera médio: " + tempoEsperaMedio);
	}

}
